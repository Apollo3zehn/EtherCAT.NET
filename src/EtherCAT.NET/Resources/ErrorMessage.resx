<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EthercatGateway_EtherCATConfigurationMismatch" xml:space="preserve">
    <value>The EtherCAT configuration does not match the actual one. Consider reloading the terminals.</value>
  </data>
  <data name="EthercatSettings_SlaveInfoIdNotUnique" xml:space="preserve">
    <value>The SlaveInfo set is invalid: A SlaveInfo ID must be unique.</value>
  </data>
  <data name="Native_0x0000" xml:space="preserve">
    <value>The working counter is 0 (SOEM).</value>
  </data>
  <data name="Native_0x0001" xml:space="preserve">
    <value>The sent frame did not return within the specified timeout (SOEM).</value>
  </data>
  <data name="Native_0x0002" xml:space="preserve">
    <value>An unknown frame was received (SOEM).</value>
  </data>
  <data name="Native_0x0003" xml:space="preserve">
    <value>A general error occured (SOEM).</value>
  </data>
  <data name="Native_0x0100" xml:space="preserve">
    <value>ScanDevices()</value>
  </data>
  <data name="Native_0x0101" xml:space="preserve">
    <value>The adapter could not be initialized. Possible reasons are:

- WinPcap is not installed
- disabled network interface
- TwinCAT claimed the adapter</value>
  </data>
  <data name="Native_0x0102" xml:space="preserve">
    <value>Could not disable process data watchdog.</value>
  </data>
  <data name="Native_0x0103" xml:space="preserve">
    <value>Could not detect any slaves. Possible cause is a running TwinCAT instance which blocks the NIC.</value>
  </data>
  <data name="Native_0x0200" xml:space="preserve">
    <value>ConfigureIoMap()</value>
  </data>
  <data name="Native_0x0300" xml:space="preserve">
    <value>ConfigureDc()</value>
  </data>
  <data name="Native_0x0301" xml:space="preserve">
    <value>No slave supports distributed clocks.</value>
  </data>
  <data name="Native_0x0302" xml:space="preserve">
    <value>The static drift compensation for distributed clocks failed.</value>
  </data>
  <data name="Native_0x0400" xml:space="preserve">
    <value>ConfigureSync01()</value>
  </data>
  <data name="Native_0x0401" xml:space="preserve">
    <value>The AssignActivate byte length is invalid.</value>
  </data>
  <data name="Native_0x0402" xml:space="preserve">
    <value>Not implemented.</value>
  </data>
  <data name="Native_0x0500" xml:space="preserve">
    <value>RequestSafeOpState()</value>
  </data>
  <data name="Native_0x0501" xml:space="preserve">
    <value>One or more terminals did not reach SafeOp-state.</value>
  </data>
  <data name="Native_0x0600" xml:space="preserve">
    <value>RequestOpState()</value>
  </data>
  <data name="Native_0x0601" xml:space="preserve">
    <value>One or more terminals did not reach Op-state. This may happen due to lost frames.</value>
  </data>
  <data name="Native_0x0700" xml:space="preserve">
    <value>UpdateIo()</value>
  </data>
  <data name="Native_0x0800" xml:space="preserve">
    <value>CompensateDcDrift()</value>
  </data>
  <data name="Native_0x0900" xml:space="preserve">
    <value>ReadSlaveState()</value>
  </data>
  <data name="Native_0x0A00" xml:space="preserve">
    <value>SdoWrite()</value>
  </data>
  <data name="Native_0x0A01" xml:space="preserve">
    <value>The slave has no mailbox.</value>
  </data>
  <data name="Native_0x0B00" xml:space="preserve">
    <value>UploadPdoConfig()</value>
  </data>
  <data name="Native_0x0B01" xml:space="preserve">
    <value>Could not read SM PDO assign register entry (number of PDOs).</value>
  </data>
  <data name="Native_0x0B02" xml:space="preserve">
    <value>Could not read SM PDO assign register entries (PDO indices).</value>
  </data>
  <data name="Native_0x0B03" xml:space="preserve">
    <value>Could not read PDO config register entry (number of SDOs / variables).</value>
  </data>
  <data name="Native_0x0B04" xml:space="preserve">
    <value>Could not read PDO config register entries (SDO / variable indices).</value>
  </data>
  <data name="Native_0xF000" xml:space="preserve">
    <value>[error messages of private functions]</value>
  </data>
  <data name="Native_0xF001" xml:space="preserve">
    <value>Validation of the configured station alias failed.</value>
  </data>
  <data name="Native_0xFFFF" xml:space="preserve">
    <value>UnknownErrorCode</value>
  </data>
  <data name="SlaveInfo_IdInvalid" xml:space="preserve">
    <value>The ID must be greater zero.</value>
  </data>
  <data name="SoemWrapper_NetworkInterfaceNotFound" xml:space="preserve">
    <value>No corresponding network interface could be found.</value>
  </data>
</root>